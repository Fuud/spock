buildscript {
  repositories {
    maven { url "http://dl.bintray.com/content/aalmiray/asciidoctor" }
    jcenter()
  }

  dependencies {
    classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.2"
  }
}

apply plugin: "base"
apply plugin: "org.asciidoctor.convert"

description = "Spock Framework"

ext {
  variants = [2.0, 2.3, 2.4]
  variant = System.getProperty("variant") as BigDecimal ?: variants.first()
  if (variant == 2.0) {
    groovyVersion = "2.0.8"
    minGroovyVersion = "2.0.0"
    maxGroovyVersion = "2.2.99"
  } else if (variant == 2.3) {
    groovyVersion = "2.3.10"
    minGroovyVersion = "2.3.0"
    maxGroovyVersion = "2.3.99"
  } else if (variant == 2.4) {
    groovyVersion = "2.4.1"
    minGroovyVersion = "2.4.0"
    maxGroovyVersion = "2.9.99"
  } else {
    throw new InvalidUserDataException("Unsupported variant: $variant")
  }
  baseVersion = "1.0"
  snapshotVersion = true
  fullVersion = "$baseVersion-groovy-$variant" + (snapshotVersion ? "-SNAPSHOT" : "")
  variantLessVersion = baseVersion + (snapshotVersion ? "-SNAPSHOT" : "")
  javaVersion = System.getProperty("java.version")
  libs = [
    ant: "org.apache.ant:ant:1.9.4",
    asm: "org.ow2.asm:asm:5.0.3",
    cglib: "cglib:cglib-nodep:3.1",
    groovy: "org.codehaus.groovy:groovy-all:$groovyVersion",
    h2database: "com.h2database:h2:1.3.174",
    junit: "junit:junit:4.12",
    log4j: "log4j:log4j:1.2.17",
    objenesis: "org.objenesis:objenesis:2.1"
  ]
}

allprojects {  
  ext.displayName = null
  
  group = "org.spockframework"
  version = fullVersion

  apply from: script("common")
  
  if (javaVersion.startsWith("1.8")) {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

apply from: script("ide")

subprojects {
  apply plugin: "groovy"
  apply plugin: "signing"

  sourceCompatibility = 1.6

  sourceSets.all { ss ->
    for (v in variants.findAll { it <= variant } ) {
      java {
        srcDir "src/$ss.name$v/java"
      }
      groovy {
        srcDir "src/$ss.name$v/groovy"
      }
    }
  }

  repositories {
    mavenCentral()
    maven { url "https://oss.jfrog.org/oss-snapshot-local/" }
  }

  configurations {
    all*.exclude module: "junit-dep"
  }

  dependencies {
    compile(project.name == "spock-gradle" ? [] : libs.groovy)
  }

  signing {
    sign configurations.archives
  }

  signArchives {
    onlyIf { gradle.taskGraph.hasTask(uploadArchives) }
  }

  configureJavadoc(javadoc)
  configureGroovydoc(groovydoc)

  task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
  }

  artifacts {
    archives sourcesJar, javadocJar
  }
}

// https://app.shippable.com/projects/541614fdf82ab7ebd69cad63
task shippableCiBuild {
  dependsOn { subprojects.build }
}

if (gradle.startParameter.taskNames.contains("shippableCiBuild")) {
  task aggregateTestResults(type: Sync) {
    from { subprojects.test.reports.junitXml.destination } 
    into "shippable/testresults"
    include "**/TEST-*.xml"
  }
  subprojects {
    tasks.withType(Test) {
      it.finalizedBy(aggregateTestResults)
    }
  }
}

task javadoc(type: Javadoc) {
  title "Spock Framework API Documentation ($variantLessVersion)"
  def docPath = snapshotVersion ? "latest" : baseVersion
  destinationDir file("build/javadoc/$docPath")
  source subprojects.javadoc.source
  classpath = files(subprojects.javadoc.classpath)
}

configureJavadoc(javadoc)

task groovydoc(type: Groovydoc) {
  docTitle "Spock Framework API Documentation ($variantLessVersion)"
  windowTitle "Spock Framework API Documentation ($variantLessVersion)"
  def docPath = snapshotVersion ? "latest" : baseVersion
  destinationDir file("build/groovydoc/$docPath")
  source subprojects.groovydoc.source
  classpath = files(subprojects.groovydoc.classpath)
  groovyClasspath = project(":spock-core").groovydoc.groovyClasspath
}

task apidoc(dependsOn: ["javadoc", "groovydoc"])

configureGroovydoc(groovydoc)

asciidoctor {
  sourceDir = file("docs")
  logDocuments = true
  options = [
    attributes: [
      "source-highlighter": "coderay"
    ]
  ]
}

File script(String name) {
  project.file("gradle/${name}.gradle")
}

def configureJavadoc(task) {
  configure(task) {
    include "spock/**"
    include "org/spockframework/mock/*"
    configure(options) {
      links "http://docs.oracle.com/javase/6/docs/api/"
      links "http://docs.groovy-lang.org/docs/groovy-$groovyVersion/html/gapi/"
      links "http://junit.org/javadoc/latest/"
      links "http://hamcrest.org/JavaHamcrest/javadoc/1.3/"
    }
  }
}

def configureGroovydoc(task) {
  configure(task) {
    include "spock/**"
    include "org/spockframework/mock/*"
  }
}


